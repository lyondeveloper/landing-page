{"version":3,"sources":["firebase/utils.js","components/modal/index.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","FormModal","state","isOpenAlert","email","phone","name","handleChange","target","value","setState","handleSubmit","e","a","preventDefault","collection","add","onClickSuscribe","toggle","props","length","toast","error","success","this","isOpen","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","id","required","onChange","type","ModalFooter","Button","color","onClick","React","Component","App","isOpenThanks","modalChange","className","class","href","modalThanksChange","handlesubmit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"obAeAA,IAASC,cAXM,CACbC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKGT,IAASU,OAAtB,IACMC,EAAYX,IAASW,YAG5BC,EAAW,IAAIZ,IAASU,KAAKG,mBACnCD,EAASE,oBAAoB,CAAEC,OAAQ,mBAGxBf,EAAf,EAFO,IC4FQgB,E,2MAjGbC,MAAQ,CACNC,aAAa,EACbC,MAAO,GACPC,MAAO,GACPC,KAAM,I,EAGRC,aAAe,oBAAGC,OAAUF,EAAb,EAAaA,KAAMG,EAAnB,EAAmBA,MAAnB,OACb,EAAKC,SAAL,eAAiBJ,EAAOG,K,EAE1BE,a,sCAAe,WAAMC,GAAN,SAAAC,EAAA,4DACbD,EAAEE,iBADW,SAGQlB,EAAUmB,WAAW,SAASC,IAAI,CACrDV,KAAM,EAAKJ,MAAMI,KACjBD,MAAO,EAAKH,MAAMG,MAClBD,MAAO,EAAKF,MAAME,QANP,uD,wDAefa,gBAAkB,SAAAL,GAAM,IAAD,EACU,EAAKV,MAA5BE,EADa,EACbA,MAAOC,EADM,EACNA,MAAOC,EADD,EACCA,KACdY,EAAW,EAAKC,MAAhBD,OACJd,EAAMgB,QAAU,GAAKf,EAAMe,QAAU,GAAKd,EAAKc,QAAU,EAC3DC,IAAMC,MAAM,kDAEZ,EAAKX,aAAaC,GAClBS,IAAME,QAAQ,gCACdL,M,wEAIM,IAAD,EACoBM,KAAKL,MAAxBM,EADD,EACCA,OAAQP,EADT,EACSA,OADT,EAEwBM,KAAKtB,MAA5BE,EAFD,EAECA,MAAOE,EAFR,EAEQA,KAAMD,EAFd,EAEcA,MACrB,OACE,6BACE,kBAACqB,EAAA,EAAD,CAAOD,OAAQA,EAAQP,OAAQA,GAC7B,kBAACS,EAAA,EAAD,CAAaT,OAAQA,GAClB,IADH,sDAEmD,KAEnD,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,mBACA,kBAACC,EAAA,EAAD,CACE3B,KAAK,OACL4B,GAAG,OACHC,UAAQ,EACR1B,MAAOH,EACP8B,SAAUZ,KAAKjB,gBAGnB,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,SACA,kBAACC,EAAA,EAAD,CACEI,KAAK,QACL/B,KAAK,QACL6B,UAAQ,EACRD,GAAG,QACHE,SAAUZ,KAAKjB,aACfE,MAAOL,KAIX,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,SAAX,qBACA,kBAACC,EAAA,EAAD,CACE3B,KAAK,QACL4B,GAAG,QACHzB,MAAOJ,EACP8B,UAAQ,EACRC,SAAUZ,KAAKjB,kBAKvB,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASjB,KAAKP,iBAAtC,eAEU,IACV,kBAACsB,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAASvB,GAAnC,mB,GAxFYwB,IAAMC,WCsFfC,G,uNA9Fb1C,MAAQ,CACNuB,QAAQ,EACRoB,cAAc,G,EAGhBC,YAAc,kBACZ,EAAKpC,SAAS,CACZe,QAAS,EAAKvB,MAAMuB,OACpBrB,MAAO,GACPE,KAAM,GACND,MAAO,M,wEAIT,OACE,yBAAK0C,UAAU,OACb,kBAAC,IAAD,MACA,yBAAKC,MAAM,UACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,OACR,4BACE,uBAAGC,KAAK,SAAR,SAEF,4BACE,uBAAGA,KAAK,UAAR,0BAKR,6BAASD,MAAM,aACb,yBAAKA,MAAM,aACT,6BACE,gEACA,uBAAGA,MAAM,aAAT,gSAOA,kBAACT,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAASjB,KAAKsB,aAAtC,gBAKF,kBAAC,EAAD,iBACMtB,KAAKtB,MADX,CAEEgB,OAAQM,KAAKsB,YACbvC,aAAciB,KAAKjB,aACnB2C,kBAAmB1B,KAAK0B,kBACxBC,aAAc3B,KAAKb,kBAKzB,6BAASuB,GAAG,QAAQc,MAAM,aACxB,yBAAKA,MAAM,WACT,yBAAKA,MAAM,wBACT,wBAAIA,MAAM,UAAV,0BACA,uBAAGA,MAAM,eAAT,6FAIA,uBAAGA,MAAM,eAAT,6GAQN,4BAAQA,MAAM,kCACZ,yBAAKA,MAAM,aACT,6BACE,wBAAIA,MAAM,eAAV,kCAEF,6BACE,wDACA,4BACE,4BACE,uBAAGC,KAAK,KAAR,4BAEF,4BACE,uBAAGA,KAAK,KAAR,kC,GApFAP,IAAMC,YCIJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.82877fc6.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n  apiKey: 'AIzaSyA7XN8oi2J3103k8aKNGFzaFIlJ6eUXEZc',\r\n  authDomain: 'univ-6e108.firebaseapp.com',\r\n  databaseURL: 'https://univ-6e108.firebaseio.com',\r\n  projectId: 'univ-6e108',\r\n  storageBucket: '',\r\n  messagingSenderId: '971192028173',\r\n  appId: '1:971192028173:web:84dc5745bbdbbd7a6dd944',\r\n  measurementId: 'G-R23L1J064B'\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n//Google authentication\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n","import React from 'react';\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label\r\n} from 'reactstrap';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport { firestore } from '../../firebase/utils';\r\n\r\nclass FormModal extends React.Component {\r\n  state = {\r\n    isOpenAlert: false,\r\n    email: '',\r\n    phone: '',\r\n    name: ''\r\n  };\r\n\r\n  handleChange = ({ target: { name, value } }) =>\r\n    this.setState({ [name]: value });\r\n\r\n  handleSubmit = async e => {\r\n    e.preventDefault();\r\n\r\n    const status = await firestore.collection('users').add({\r\n      name: this.state.name,\r\n      phone: this.state.phone,\r\n      email: this.state.email\r\n    });\r\n\r\n    // if (!status) {\r\n    //   toast.error('Error 500');\r\n    //   return;\r\n    // }\r\n  };\r\n\r\n  onClickSuscribe = e => {\r\n    const { email, phone, name } = this.state;\r\n    const { toggle } = this.props;\r\n    if (email.length <= 0 || phone.length <= 0 || name.length <= 0) {\r\n      toast.error('Asegurate que todos los campos esten rellenos');\r\n    } else {\r\n      this.handleSubmit(e);\r\n      toast.success('Felicidades, te has suscrito');\r\n      toggle();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { isOpen, toggle } = this.props;\r\n    const { email, name, phone } = this.state;\r\n    return (\r\n      <div>\r\n        <Modal isOpen={isOpen} toggle={toggle}>\r\n          <ModalHeader toggle={toggle}>\r\n            {' '}\r\n            Coloca tu información en el siguiente formulario{' '}\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Form>\r\n              <FormGroup>\r\n                <Label for='name'>Nombre Completo</Label>\r\n                <Input\r\n                  name='name'\r\n                  id='name'\r\n                  required\r\n                  value={name}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for='email'>Email</Label>\r\n                <Input\r\n                  type='email'\r\n                  name='email'\r\n                  required\r\n                  id='email'\r\n                  onChange={this.handleChange}\r\n                  value={email}\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label for='phone'>Numero telefonico</Label>\r\n                <Input\r\n                  name='phone'\r\n                  id='phone'\r\n                  value={phone}\r\n                  required\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={this.onClickSuscribe}>\r\n              Suscribirme\r\n            </Button>{' '}\r\n            <Button color='secondary' onClick={toggle}>\r\n              Cancelar\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormModal;\r\n","import React from 'react';\nimport FormModal from './components/modal';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Button } from 'reactstrap';\n\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    isOpen: false,\n    isOpenThanks: false\n  };\n\n  modalChange = () =>\n    this.setState({\n      isOpen: !this.state.isOpen,\n      email: '',\n      name: '',\n      phone: ''\n    });\n\n  render() {\n    return (\n      <div className='App'>\n        <ToastContainer />\n        <nav class='navbar'>\n          <div class='container'>\n            <ul class='nav'>\n              <li>\n                <a href='#home'>Home</a>\n              </li>\n              <li>\n                <a href='#about'>Acerca de nosotros</a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <section class='section-a'>\n          <div class='container'>\n            <div>\n              <h1>Cursos online de programación</h1>\n              <p class='paragraph'>\n                Conviertete en el siguiente creador de la aplicación que\n                revolucionara el mercado aprendiendo acerca de las nuevas\n                tecnologías web desde un simple layout de HTML y CSS hasta crear\n                una aplicación fullstack usando un framework UI y creando una\n                REST API que la interfaz consuma.\n              </p>\n              <Button color='primary' onClick={this.modalChange}>\n                Suscribirme\n              </Button>\n            </div>\n\n            <FormModal\n              {...this.state}\n              toggle={this.modalChange}\n              handleChange={this.handleChange}\n              modalThanksChange={this.modalThanksChange}\n              handlesubmit={this.handleSubmit}\n            ></FormModal>\n          </div>\n        </section>\n\n        <section id='about' class='section-b'>\n          <div class='overlay'>\n            <div class='section-b-inner py-5'>\n              <h3 class='text-2'>Aprende de los mejores</h3>\n              <p class='text-5 mt-1'>\n                Somos un equipo de programadores con el proposito de transmitir\n                todo nuestro conocimiento\n              </p>\n              <p class='text-5 mt-1'>\n                Sumate a esta oportunidad de entrar a un mundo\n                extraordinariamente interesante y lleno de muchos retos\n              </p>\n            </div>\n          </div>\n        </section>\n\n        <footer class='section-footer py-4 bg-primary'>\n          <div class='container'>\n            <div>\n              <h2 class='text-2 mb-1'>Todos los derechos reservados</h2>\n            </div>\n            <div>\n              <h3>Información adicional</h3>\n              <ul>\n                <li>\n                  <a href='#'>Politicas de Privacidad</a>\n                </li>\n                <li>\n                  <a href='#'>Terminos y Servicios</a>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}